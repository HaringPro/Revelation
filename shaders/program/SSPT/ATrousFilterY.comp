/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: À-Trous wavelet filter for indirect lighting
	Reference:  https://research.nvidia.com/sites/default/files/pubs/2017-07_Spatiotemporal-Variance-Guided-Filtering://svgf_preprint.pdf
                https://cescg.org/wp-content/uploads/2018/04/Dundr-Progressive-Spatiotemporal-Variance-Guided-Filtering-2.pdf

--------------------------------------------------------------------------------
*/

// #extension GL_NV_compute_shader_derivatives : enable

layout (local_size_x = 8, local_size_y = 8) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

layout (rgba16f) restrict uniform image2D colorimg3;

//======// Uniform //=============================================================================//

uniform sampler2D colortex13; // Previous indirect light

uniform sampler2D depthtex0;

uniform mat4 gbufferProjectionInverse;

uniform vec2 viewSize;

uniform int frameCounter;

//======// Function //============================================================================//

const uint padRadius = 1;
const uvec2 sharedSize = gl_WorkGroupSize.xy + (padRadius << 1);

shared float sharedVariance[sharedSize.x][sharedSize.y];

void SharedPreload(in ivec2 shiftX) {
    ivec2 groupBase = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy - padRadius) + shiftX;

    const uint sharedArea = sharedSize.x * sharedSize.y;
    const uint groupArea = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    const uint stageNum = (sharedArea - 1) / groupArea + 1;

    uint localIndex = gl_LocalInvocationIndex;
    ivec2 localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

    ivec2 loadTexel = groupBase + localID;
    sharedVariance[localID.x][localID.y] = imageLoad(colorimg3, loadTexel).a;

    for (uint stage = 1u; stage < stageNum; ++stage) {
        localIndex = gl_LocalInvocationIndex + stage * groupArea;

        if (localIndex < sharedArea) {
            localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

            loadTexel = groupBase + localID;
        	sharedVariance[localID.x][localID.y] = imageLoad(colorimg3, loadTexel).a;
        }
    }

    memoryBarrierShared();
    barrier();
}

uint triple32(uint x) {
    // https://nullprogram.com/blog/2018/07/31/
    x ^= x >> 17;
    x *= 0xed5ad4bbu;
    x ^= x >> 11;
    x *= 0xac4c1b51u;
    x ^= x >> 15;
    x *= 0x31848babu;
    x ^= x >> 14;
    return x;
}

uint randState = triple32(uint(gl_GlobalInvocationID.x + viewSize.x * gl_GlobalInvocationID.y) + uint(viewSize.x * viewSize.y) * frameCounter);
uint RandNext() { return randState = triple32(randState); }
#define RandNext2F() (vec2(RandNext()) / float(0xffffffffu))

float CalculateVariance(in ivec2 texel) {
    // const float kernel[2] = float[2](1.0, 0.3);
	const float kernel[2][2] = {{0.25, 0.125}, {0.125, 0.0625}};

	float variance = 0.0;
	for (int x = -1; x <= 1; ++x) {
		for (int y = -1; y <= 1; ++y) {
			ivec2 varianceTexel = texel + ivec2(x, y);
			float weight = kernel[abs(x)][abs(y)];

			variance += sharedVariance[varianceTexel.x][varianceTexel.y] * weight;
		}
	}

	return variance * inversesqrt(max(1e-7, variance));
}

//======// Main //================================================================================//
void main() {
	ivec2 shiftX = ivec2(int(viewSize.x) >> 1, 0);

	SharedPreload(shiftX);

	ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
	float depth = texelFetch(depthtex0, texel << 1, 0).x;
	if (depth < 1.0) {
        ivec2 halfResBorder = (ivec2(viewSize) >> 1) - 1;

		vec4 normalDepthData = texelFetch(colortex13, texel + shiftX, 0);
		// vec2 depthGradient = vec2(dFdx(normalDepthData.w), dFdy(normalDepthData.w));

		const ivec2 offset[4] = {
			ivec2(0, -2), ivec2(0, -1),
			ivec2(0,  1), ivec2(0,  2)
		};

		#if 0
			const float kernel[4] = {3.0 / 128.0, 3.0 / 32.0, 3.0 / 32.0, 3.0 / 128.0};

			float sumWeight = 0.140625;
		#else
			const float kernel[4] = {0.0625, 0.125, 0.125, 0.0625};

			float sumWeight = 0.25;
		#endif

		vec4 indirectCurrent = imageLoad(colorimg3, texel + shiftX);
		float centerLuma = GetLuminance(indirectCurrent.rgb);
		indirectCurrent *= sumWeight;

		float variance = CalculateVariance(ivec2(gl_LocalInvocationID.xy + 1));
		float variancePhi = 1.0 / (variance * 4.0 + 1e-6);

		ivec2 randTexel = texel + ivec2((RandNext2F() - 0.5) * ATROUS_FILTER_SIZE);

		for (uint i = 0u; i < 4u; ++i) {
			ivec2 sampleTexel = clamp(randTexel + offset[i] * ATROUS_FILTER_SIZE, ivec2(0), halfResBorder);
			vec4 sampleData = texelFetch(colortex13, sampleTexel + shiftX, 0);

			vec4 sampleLight = imageLoad(colorimg3, sampleTexel + shiftX);
			float sampleLuma = GetLuminance(sampleLight.rgb);

			// float weight = exp2(-dotSelf(offset));
			// float weight = kernel[abs(x)] * kernel[abs(y)];
			float weight = kernel[i];

			// wN = max(0, N0 · N1) ^ σN
			weight *= pow16(max0(dot(sampleData.xyz, normalDepthData.xyz)));

			// wD = exp(−|D0 − D1| / (|σD(grad · off)| + ε))
			// weight *= fastExp(-abs(sampleData.w - normalDepthData.w) / (abs(1.0 * dot(depthGradient, offset)) + 1e-6));
			weight *= fastExp(-abs(sampleData.w - normalDepthData.w) * inversesqrt(float(ATROUS_FILTER_SIZE)));

			// wL = exp(−|L0 − L1| / (σLvar + ε))
			weight *= fastExp(-abs(sampleLuma - centerLuma) * variancePhi);

			indirectCurrent.rgb += sampleLight.rgb * weight;
			indirectCurrent.a += sampleLight.a * weight * weight; // Sample variance
			sumWeight += weight;
		}

		indirectCurrent /= sumWeight;
		indirectCurrent.a /= sumWeight; // Sample variance
		imageStore(colorimg3, texel, indirectCurrent);
	}
}
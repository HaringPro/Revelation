/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Compute indirect lighting

--------------------------------------------------------------------------------
*/

#ifndef COMPUTE_SHADER
#define COMPUTE_SHADER
#endif

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

restrict writeonly uniform image2D colorimg3;

//======// Uniform //=============================================================================//

#include "/lib/universal/Uniform.glsl"

//======// Function //============================================================================//

#include "/lib/universal/Transform.glsl"
#include "/lib/universal/Fetch.glsl"
#include "/lib/universal/Noise.glsl"
#include "/lib/universal/Offset.glsl"

#include "/lib/atmospherics/Global.glsl"

#include "/lib/surface/BRDF.glsl"

#include "/lib/lighting/GlobalIllumination.glsl"

float GetClosestDepth(in ivec2 texel) {
    float depth = loadDepth0(texel);

    for (uint i = 0u; i < 8u; ++i) {
        ivec2 sampleTexel = (offset3x3N[i] << 1) + texel;
        float sampleDepth = loadDepth0(sampleTexel);
        depth = min(depth, sampleDepth);
    }

    return depth;
}

//======// Main //================================================================================//
void main() {
	ivec2 screenTexel = ivec2(gl_GlobalInvocationID.xy);

    ivec2 currentTexel = screenTexel << 1;
	float depth = GetClosestDepth(currentTexel);
	// float depth = loadDepth0(currentTexel);

	if (depth < 1.0) {
		uvec4 gbufferData0 = loadGbufferData0(currentTexel);
		vec3 worldNormal = FetchWorldNormal(gbufferData0);

    	vec2 screenCoord = texelToUv(currentTexel);
		vec3 screenPos = vec3(screenCoord, depth);
		vec3 viewPos = ScreenToViewSpace(screenPos);

        float dither = BlueNoiseTemporal(currentTexel);

		#ifdef RSM_ENABLED
			float skyLightmap = Unpack2x8UY(gbufferData0.x);
			imageStore(colorimg3, screenTexel, vec4(CalculateRSM(viewPos, worldNormal, dither, skyLightmap), 1.0));
		#else
			vec2 lightmap = Unpack2x8U(gbufferData0.x);

			// Shift the write position to avoid load-write conflict
			imageStore(colorimg3, screenTexel + ivec2(int(viewWidth * 0.5), 0), vec4(CalculateSSPT(screenPos, viewPos, worldNormal, lightmap, dither), 1.0));
		#endif
	}
}
/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Generate Sky SH Coefficients

--------------------------------------------------------------------------------
*/

#extension GL_KHR_shader_subgroup_arithmetic : enable

//======// Input //===============================================================================//

layout (local_size_x = 128, local_size_y = 1) in;
const ivec3 workGroups = ivec3(1, 1, 1);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Uniform //=============================================================================//

#include "/lib/universal/Uniform.glsl"

//======// SSBO //================================================================================//

#include "/lib/universal/SSBO.glsl"

//======// Shared Memory //=======================================================================//

#if defined MC_GL_VENDOR_NVIDIA
	shared vec3[4] sharedSkySH[gl_NumSubgroups];
#else
	shared vec3[4] sharedSkySH[64];
#endif

//======// Function //============================================================================//

#include "/lib/universal/Random.glsl"
#include "/lib/atmosphere/Global.glsl"

vec3 sampleHemisphereVector(in vec3 vector, in vec2 xy) {
    float phi = TAU * xy.x;
    float cosTheta = xy.y * 2.0 - 1.0;
    float sinTheta = sqrt(saturate(1.0 - cosTheta * cosTheta));
    vec3 hemisphere = vec3(cossin(phi) * sinTheta, cosTheta);

	return hemisphere * fastSign(dot(hemisphere, vector));
}

void ParallelReduceSum(in uint index, in uint samples) {
	for (uint stride = samples >> 1u; stride > 0u; stride >>= 1u) {
		if (index < stride) {
			for (uint band = 0u; band < 4u; ++band) {
				sharedSkySH[index][band] += sharedSkySH[index + stride][band];
			}
		}

    	memoryBarrierShared();
		barrier();
	}
}

//======// Main //================================================================================//
void main() {
	const vec3 upDir = vec3(0.0, 1.0, 0.0);
	const uint samples = gl_WorkGroupSize.x;

    uint index = gl_LocalInvocationIndex;

	// Sample and compute SH coefficients
	vec3 direction = sampleHemisphereVector(upDir, Hammersley(index, samples));
	vec3 skyRadiance = texture(skyViewTex, FromSkyViewLutParams(direction) + vec2(0.0, 0.5)).rgb;

	vec3[4] shCoeff = ToSphericalHarmonics(skyRadiance, direction);

	// Reduce SH coefficients in subgroup
	for (uint band = 0u; band < 4u; ++band) {
		shCoeff[band] = subgroupAdd(shCoeff[band]);
		if (subgroupElect()) {
			sharedSkySH[gl_SubgroupID][band] = shCoeff[band];
		}
	}
    barrier();

    if (index < gl_NumSubgroups) {
		for (uint band = 0u; band < 4u; ++band) {
			shCoeff[band] = subgroupAdd(sharedSkySH[index][band]);
		}
    }

	// Store SH coefficients in thread 0
	if (index == 0u) {
		for (uint band = 0u; band < 4u; ++band) {
			shCoeff[band] *= TAU / float(samples); // Normalization
			global.light.skySH[band] = shCoeff[band];
		}

		// Evaluate sky illuminance from SH coefficients (facing up)
		global.light.skyIlluminance = FromSphericalHarmonics(shCoeff, upDir);
	}
}
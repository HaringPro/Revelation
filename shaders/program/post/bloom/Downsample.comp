/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Downsample bloom tiles

--------------------------------------------------------------------------------
*/

//======// Input //===============================================================================//

layout (local_size_x = 8, local_size_y = 8) in;

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

#define BLOOM_BLUR_SAMPLES 1 // [1 2 3 4 5 6 7 8]

//======// Uniform //=============================================================================//

writeonly uniform image2D colorimg4;

uniform sampler2D colortex1; // TAA image output
uniform sampler2D colortex4; // Bloom tile input

uniform vec2 viewSize;
uniform vec2 viewPixelSize;

//======// Function //============================================================================//

#if DOWNSAMPLE_LEVEL == 0
	#define bloomTileTex colortex1
#else
	#define bloomTileTex colortex4
#endif
#define loadTile(uv) textureLod(bloomTileTex, uv, 0.0).rgb

const vec2 bloomTileOffset[7] = vec2[7](
	vec2(0.0000, 0.0000),
	vec2(0.0000, 0.5000),
	vec2(0.2500, 0.5000),
	vec2(0.2500, 0.6250),
	vec2(0.3125, 0.6250),
	vec2(0.3150, 0.6563),
	vec2(0.3281, 0.6563)
);

vec3 CalculateBloomTile(in vec2 uv) {
	vec3  bloomTile = vec3(0.0);
	float sumWeight = EPS;

	for (int y = -BLOOM_BLUR_SAMPLES; y <= BLOOM_BLUR_SAMPLES; ++y) {
		for (int x = -BLOOM_BLUR_SAMPLES; x <= BLOOM_BLUR_SAMPLES; ++x) {
			vec3 sampleTile = loadTile(uv + vec2(x, y) * viewPixelSize);
			float weight = exp2(-sdot(vec2(x, y)) * 0.25);

			#if DOWNSAMPLE_LEVEL == 0
				weight *= karisAverage(sampleTile);
			#endif

			bloomTile += sampleTile * weight;
			sumWeight += weight;
		}
	}

	return bloomTile * rcp(sumWeight);
}

//======// Main //================================================================================//
void main() {
    vec2 interpolatedUV = vec2(gl_GlobalInvocationID.xy) * 2.0 + 1.0;

	const int index = max(0, DOWNSAMPLE_LEVEL - 1);
    vec2 srcUV = (interpolatedUV + float(index * 12)) * viewPixelSize + bloomTileOffset[index];

	if (clamp(srcUV, viewPixelSize, 1.0 - viewPixelSize) == srcUV) {
		vec3 bloomTile = CalculateBloomTile(srcUV);

		vec2 dstTexel = vec2(gl_GlobalInvocationID.xy + DOWNSAMPLE_LEVEL * 12) + bloomTileOffset[DOWNSAMPLE_LEVEL] * viewSize;
		imageStore(colorimg4, ivec2(dstTexel + 0.5), vec4(bloomTile, 1.0));
	}
}
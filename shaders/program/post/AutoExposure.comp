/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Compute auto exposure
	Reference: https://bruop.github.io/exposure/

--------------------------------------------------------------------------------
*/

#extension GL_KHR_shader_subgroup_arithmetic : enable

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Input //===============================================================================//

layout (local_size_x = HISTOGRAM_BIN_COUNT, local_size_y = 1) in;
const ivec3 workGroups = ivec3(1, 1, 1);

//======// Uniform //=============================================================================//

#include "/lib/universal/Uniform.glsl"

//======// SSBO //================================================================================//

#include "/lib/universal/SSBO.glsl"

//======// Shared Memory //=======================================================================//

shared uint sharedBinIndex[gl_NumSubgroups];

//======// Function //============================================================================//

const float autoEvRange = AUTO_EV_MAX - AUTO_EV_MIN;
const float autoEvRangeInv = 1.0 / autoEvRange;

float histogramBinToLum(in float bin) {
    return exp2(bin * (autoEvRange / float(HISTOGRAM_BIN_COUNT - 1u)) + AUTO_EV_MIN);
}

//======// Main //================================================================================//
void main() {
	uint index = gl_LocalInvocationIndex;

	// Sum histogram bin index
    uint count = global.exposure.histogram[index];
    uint subgroupSum = subgroupAdd(count * index);

	if (subgroupElect()) {
        sharedBinIndex[gl_SubgroupID] = subgroupSum;
	}
    barrier();

    if (index < gl_NumSubgroups) {
        subgroupSum = subgroupAdd(sharedBinIndex[index]);
    }

    if (index == 0u) {
        float weightedLogAverage = float(subgroupSum) / max(viewWidth * viewHeight * 0.25 - float(count), 1.0);
		float avgLuminance = histogramBinToLum(weightedLogAverage);

        const float K = 18.0; // Calibration constant
        const float calibration = exp2(AUTO_EV_BIAS) * K / ISO;

        float targetExposure = calibration / avgLuminance;
        float prevExposure = global.exposure.value;

        float exposureRate = targetExposure > prevExposure ? EXPOSURE_SPEED_DOWN : EXPOSURE_SPEED_UP;
        global.exposure.value = mix(targetExposure, prevExposure, exp2(-exposureRate * frameTime));
	}

    global.exposure.histogram[index] = 0u;
}
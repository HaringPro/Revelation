/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Spatial filter for indirect lighting

--------------------------------------------------------------------------------
*/

layout (local_size_x = 8, local_size_y = 8) in;
const vec2 workGroupsRender = vec2(0.5f, 0.5f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

writeonly restrict uniform image2D colorimg3;

//======// Uniform //=============================================================================//

uniform sampler2D depthtex0;

uniform sampler2D colortex13; // Previous indirect light

uniform mat4 gbufferModelViewInverse;
uniform mat4 gbufferProjectionInverse;

uniform vec2 viewPixelSize;
uniform vec2 viewSize;

uniform int frameCounter;

//======// Function //============================================================================//

#include "/lib/universal/Offset.glsl"

const uint padRadius = 2;
const uvec2 sharedSize = gl_WorkGroupSize.xy + (padRadius << 1);

shared vec3 sharedLight[sharedSize.x][sharedSize.y];
shared vec4 sharedData [sharedSize.x][sharedSize.y];

void SharedPreload() {
    ivec2 groupBase = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy - padRadius);
    ivec2 shiftX = ivec2(int(viewSize.x) >> 1, 0);
    ivec2 halfResBorder = (ivec2(viewSize) >> 1) - 1;

    const uint sharedArea = sharedSize.x * sharedSize.y;
    const uint groupArea = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    const uint stageNum = (sharedArea - 1) / groupArea + 1;

    uint localIndex = gl_LocalInvocationIndex;
    ivec2 localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

    ivec2 loadTexel = groupBase + localID;
    loadTexel = clamp(loadTexel, ivec2(0), halfResBorder);

    sharedLight[localID.x][localID.y] = texelFetch(colortex13, loadTexel, 0).rgb;
    sharedData [localID.x][localID.y] = texelFetch(colortex13, loadTexel + shiftX, 0);

    for (uint stage = 1u; stage < stageNum; ++stage) {
        localIndex = gl_LocalInvocationIndex + stage * groupArea;

        if (localIndex < sharedArea) {
            localID = ivec2(localIndex % sharedSize.x, localIndex / sharedSize.x);

            loadTexel = groupBase + localID;
            loadTexel = clamp(loadTexel, ivec2(0), halfResBorder);

            sharedLight[localID.x][localID.y] = texelFetch(colortex13, loadTexel, 0).rgb;
            sharedData [localID.x][localID.y] = texelFetch(colortex13, loadTexel + shiftX, 0);
        }
    }

    memoryBarrierShared();
    barrier();
}

vec3 ScreenToViewVectorRaw(in vec2 screenCoord) {
	vec2 NDCCoord = screenCoord * 2.0 - 1.0;
	return normalize(vec3(diagonal2(gbufferProjectionInverse) * NDCCoord, gbufferProjectionInverse[3].z));
}

uint triple32(uint x) {
    // https://nullprogram.com/blog/2018/07/31/
    x ^= x >> 17;
    x *= 0xed5ad4bbu;
    x ^= x >> 11;
    x *= 0xac4c1b51u;
    x ^= x >> 15;
    x *= 0x31848babu;
    x ^= x >> 14;
    return x;
}

uint randState = triple32(uint(gl_GlobalInvocationID.x + viewSize.x * gl_GlobalInvocationID.y) + uint(viewSize.x * viewSize.y) * frameCounter);
uint RandNext() { return randState = triple32(randState); }
#define RandNext2F() (vec2(RandNext()) / float(0xffffffffu))

//======// Main //================================================================================//
void main() {
    SharedPreload();

	ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    float depth = texelFetch(depthtex0, texel << 1, 0).x;
    if (depth < 1.0) {
        uvec2 sharedTexel = gl_LocalInvocationID.xy + padRadius;

        vec3 indirectData = sharedLight[sharedTexel.x][sharedTexel.y];
        vec4 normalDepthData = sharedData[sharedTexel.x][sharedTexel.y];

        vec2 screenCoord = normCoord(gl_GlobalInvocationID.xy);
        vec3 viewDir = ScreenToViewVectorRaw(screenCoord * 2.0);
        vec3 worldDir = mat3(gbufferModelViewInverse) * viewDir;
        float NdotV = saturate(dot(normalDepthData.xyz, -worldDir));

        float sumWeight = 1.0;
        sharedTexel += ivec2(2.0 * (RandNext2F() - 0.5));

        for (uint i = 0u; i < 16u; ++i) {
            uvec2 sampleSharedTexel = sharedTexel + offset4x4[i];
            vec4 sampleData = sharedData[sampleSharedTexel.x][sampleSharedTexel.y];

            float weight = exp2(-0.1 * dotSelf(offset4x4[i]));
            weight *= fastExp(-abs(sampleData.w - normalDepthData.w) * 4.0 * NdotV); // Distance weight
            weight *= pow16(max0(dot(sampleData.xyz, normalDepthData.xyz))); // Normal weight

            vec3 sampleLight = sharedLight[sampleSharedTexel.x][sampleSharedTexel.y];

            indirectData += sampleLight * weight;
            sumWeight += weight;
        }

        indirectData /= sumWeight;

        imageStore(colorimg3, texel, vec4(indirectData, 1.0));
    }
}

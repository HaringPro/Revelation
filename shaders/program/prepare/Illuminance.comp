/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Compute and store global illuminances

--------------------------------------------------------------------------------
*/

//======// Input //===============================================================================//

layout (local_size_x = 1, local_size_y = 2) in;
const ivec3 workGroups = ivec3(1, 1, 1);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Uniform //=============================================================================//

writeonly uniform image2D colorimg4;

uniform sampler3D atmosCombinedLut; // Combined atmospheric LUT

uniform int moonPhase;

uniform float eyeAltitude;
uniform float nightVision;
uniform float wetness;
uniform float viewWidth;

uniform vec3 worldSunVector;
uniform vec3 lightningShading;

//======// Shared Memory //=======================================================================//

shared vec3 illuminance[2];

//======// Function //============================================================================//

#include "/lib/atmosphere/Global.glsl"
#include "/lib/atmosphere/PrecomputedAtmosphericScattering.glsl"

//======// Main //================================================================================//
void main() {
    uint index = gl_LocalInvocationID.y;

	// Compute illuminance
	if (index == 0) {
		vec3 camera = vec3(0.0, viewerHeight, 0.0);
		vec3 sunIrradiance, moonIrradiance;
		illuminance[1] = GetSunAndSkyIrradiance(camera, vec3(0.0, 1.0, 0.0), worldSunVector, sunIrradiance, moonIrradiance) * SKY_SPECTRAL_RADIANCE_TO_LUMINANCE;

		// Fix the sunlight misalignment at sunrise and sunset
		sunIrradiance *= 1.0 - curve(saturate(1.0 - worldSunVector.y * 32.0));

		// Irradiance to illuminance
		illuminance[0] = SUN_SPECTRAL_RADIANCE_TO_LUMINANCE * (sunIrradiance + moonIrradiance);

		illuminance[1] += lightningShading * 0.05;
		#ifdef AURORA
			float auroraAmount = smoothstep(0.0, 0.2, -worldSunVector.y) * AURORA_STRENGTH;
			vec3 auroraShading = vec3(0.0, 0.005, 0.0025) * auroraAmount;
			illuminance[1] += auroraShading;
		#endif
	}

	// Store illuminance in the rightmost column of the image
	imageStore(colorimg4, ivec2(int(viewWidth) - 1, index), vec4(illuminance[index], 1.0));
}
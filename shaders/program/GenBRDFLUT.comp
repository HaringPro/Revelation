/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

	Pass: Generate BRDF LUT
	Reference: https://www.gamedevs.org/uploads/real-shading-in-unreal-engine-4.pdf
               https://ggx-research.github.io/publication/2023/06/09/publication-ggx.html

--------------------------------------------------------------------------------
*/

//======// Input //===============================================================================//

layout (local_size_x = 16, local_size_y = 16) in;
const ivec3 workGroups = ivec3(32, 32, 1);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Uniform //=============================================================================//

writeonly uniform image2D brdfLutImg;

#include "/lib/universal/Uniform.glsl"

//======// Function //============================================================================//

#include "/lib/universal/Random.glsl"
#include "/lib/surface/BRDF.glsl"

const uint samples = 2048u;

vec2 IntegrateBRDF(in float roughness, in float NdotV) {
    vec3 V; // View direction
    V.x = sqrt(1.0 - NdotV * NdotV); // sin(theta)
    V.y = 0.0;
    V.z = NdotV; // cos(theta)

    float A = 0.0; // Scale factor
    float B = 0.0; // Offset factor
    const vec3 N = vec3(0.0, 0.0, 1.0); // Normal

    for (uint i = 0u; i < samples; ++i) {
        vec2 Xi = Hammersley(i, samples);
        vec3 H = SampleGGXVNDF(Xi, V, roughness, N);
        vec3 L = 2.0 * dot(V, H) * H - V;

        float NdotL = L.z;
        if (NdotL > 0.0) {
			float VdotH = saturate(dot(V, H));

            // Geometric occlusion term
            float G_Vis = G2withG1SmithGGX(NdotL, NdotV, roughness);

            // Fresnel term approximation
            float Fc = pow5(1.0 - VdotH);

            // Split-sum approximation
            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    return vec2(A, B) * rcp(float(samples));
}

//======// Main //================================================================================//
void main() {
	ivec2 lookupTexel = ivec2(gl_GlobalInvocationID.xy);
	vec2 lookupCoord = (vec2(lookupTexel) + 0.5) / vec2(imageSize(brdfLutImg));

    vec2 brdf = IntegrateBRDF(lookupCoord.x, lookupCoord.y);
	imageStore(brdfLutImg, lookupTexel, vec4(brdf, 0.0, 1.0));
}
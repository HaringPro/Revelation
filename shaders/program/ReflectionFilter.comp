/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Reflection Filter
    Reference: https://www.researchgate.net/publication/354065087_ReBLUR_A_Hierarchical_Recurrent_Denoiser

--------------------------------------------------------------------------------
*/

//======// Input //===============================================================================//

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(1.0, 1.0);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Uniform //=============================================================================//

layout (rgba16f) restrict uniform image2D colorimg1;

#include "/lib/universal/Uniform.glsl"

//======// Struct //==============================================================================//

#include "/lib/universal/Material.glsl"

//======// Function //============================================================================//

#include "/lib/universal/Transform.glsl"
#include "/lib/universal/Fetch.glsl"
#include "/lib/universal/Offset.glsl"
#include "/lib/universal/Random.glsl"

// https://alakhag.github.io/posts/sg/
float sphericalGaussian(in vec3 v, in vec3 p, in float lambda) {
    return fastExp(lambda * (saturate(dot(v, p)) - 1.0));
}

float lobeSharpness(in float roughness) {
    return 2.0 / (roughness * roughness);
}

float lobeWeight(in vec3 cNormal, in vec3 sNormal, in float cRoughness, in float sRoughness, const float factor) {
    float cLambda = lobeSharpness(cRoughness), sLambda = lobeSharpness(sRoughness);
    float product = cLambda * sLambda, summa = cLambda + sLambda;
    return pow(summa * inversesqrt(product) * 0.5, -factor) * sphericalGaussian(cNormal, sNormal, product * (factor / maxEps(summa)));
}

vec4 ReflectionFilter(in ivec2 texel, in vec4 reflectionData, in float roughness, in vec3 worldNormal, in vec3 worldDir, in float filterSize, in vec2 randOffset) {
    float offsetScale = filterSize * saturate(20.0 * roughness);
    offsetScale *= saturate(0.25 + reflectionData.a * 0.5);

    // Calculate kernel basis
    vec3 reflectedDir = reflect(-worldDir, worldNormal);
    vec2 tangent = normalize(cross(worldNormal, reflectedDir).xy) * offsetScale;
    vec2 bitangent = vec2(tangent.y, -tangent.x);

    float NdotV = abs(dot(worldNormal, worldDir));
    // float skewFactor = mix(1.0, roughness, approxSqrt(saturate(1.0 - NdotV)));
    // tangent *= skewFactor;

    float skewFactor = mix(0.5 + 0.5 * roughness, 1.0, NdotV);
    bitangent *= 1.0 / skewFactor;

    // float sigmaN = 128.0 / (roughness + 0.125);
    float hitDistPhi = -0.05 * oms(roughness) / (reflectionData.a + 1.0);
    float sharpenWeight = 0.125 + 0.375 * saturate(reflectionData.a * 0.25);
    ivec2 texelEnd = ivec2(viewSize) - 1;

    reflectionData.rgb *= pow(sdot(reflectionData.rgb) + EPS, 0.5 * sharpenWeight - 0.5);
    float sumWeight = 1.0;

    for (uint i = 0u; i < 8u; ++i) {
        vec2 offset = offset3x3N[i] + randOffset;
        ivec2 sampleTexel = clamp(texel + ivec2(tangent * offset.x + bitangent * offset.y), ivec2(0), texelEnd);

        vec4 sampleData = imageLoad(colorimg1, sampleTexel);

        // float sampleLinerDepth = FetchLinearDepth(sampleTexel);
        vec3 sampleWorldNormal = FetchWorldNormal(sampleTexel);
        // vec3 sampleReflectedDir = reflect(-worldDir, sampleWorldNormal);
        float sampleRoughness = sqr(1.0 - loadGbufferData1(sampleTexel).x);

        float weight = lobeWeight(worldNormal, sampleWorldNormal, roughness, sampleRoughness, 2.0) * exp2(abs(reflectionData.a - sampleData.a) * hitDistPhi);
        weight = saturate(weight);

        // Sharpen
        sampleData.rgb *= pow(sdot(sampleData.rgb) + EPS, 0.5 * sharpenWeight - 0.5);

        reflectionData += sampleData * weight;
        sumWeight += weight;
    }

    reflectionData *= 1.0 / sumWeight;

    // Sharpen
    reflectionData.rgb *= pow(sdot(reflectionData.rgb) + EPS, 0.5 / sharpenWeight - 0.5);

    return reflectionData;
}

//======// Main //================================================================================//
void main() {
	ivec2 screenTexel = ivec2(gl_GlobalInvocationID.xy);

    vec4 reflectionData = imageLoad(colorimg1, screenTexel);

    #if defined SPECULAR_MAPPING && defined MC_SPECULAR_MAP
        Material material = GetMaterialData(loadGbufferData1(screenTexel).xy);

        if (material.specularMask && material.isRough) {
            vec2 screenCoord = texelToUv(gl_GlobalInvocationID.xy);
            vec3 viewDir = ScreenToViewVector(screenCoord);

            vec3 worldDir = mat3(gbufferModelViewInverse) * viewDir;
            vec3 worldNormal = FetchWorldNormal(screenTexel);

            vec2 randOffset = R2(BlueNoiseTemporal(screenTexel));
            reflectionData = ReflectionFilter(screenTexel, reflectionData, material.roughness, worldNormal, worldDir, REFLECTION_FILTER_SIZE, randOffset);
        }
    #endif

    imageStore(colorimg1, screenTexel, reflectionData);
}
/*
--------------------------------------------------------------------------------

	Revelation Shaders

	Copyright (C) 2024 HaringPro
	Apache License 2.0

    Pass: Reflection Filter
    Reference: https://www.researchgate.net/publication/354065087_ReBLUR_A_Hierarchical_Recurrent_Denoiser

--------------------------------------------------------------------------------
*/

layout (local_size_x = 16, local_size_y = 16) in;
const vec2 workGroupsRender = vec2(1.0f, 1.0f);

//======// Utility //=============================================================================//

#include "/lib/Utility.glsl"

//======// Output //==============================================================================//

layout (rgba16f) restrict uniform image2D colorimg2;

//======// Uniform //=============================================================================//

#include "/lib/universal/Uniform.glsl"

//======// Struct //==============================================================================//

#include "/lib/universal/Material.glsl"

//======// Function //============================================================================//

#include "/lib/universal/Transform.glsl"
#include "/lib/universal/Fetch.glsl"
#include "/lib/universal/Offset.glsl"

uint triple32(uint x) {
    // https://nullprogram.com/blog/2018/07/31/
    x ^= x >> 17;
    x *= 0xed5ad4bbu;
    x ^= x >> 11;
    x *= 0xac4c1b51u;
    x ^= x >> 15;
    x *= 0x31848babu;
    x ^= x >> 14;
    return x;
}

uint randState = triple32(uint(gl_GlobalInvocationID.x + viewSize.x * gl_GlobalInvocationID.y) + uint(viewSize.x * viewSize.y) * frameCounter);
uint RandNext() { return randState = triple32(randState); }
#define RandNext2F() (vec2(RandNext()) / float(0xffffffffu))

// https://alakhag.github.io/posts/sg/
float sphericalGaussian(in vec3 v, in vec3 p, in float lambda) {
    return fastExp(lambda * (saturate(dot(v, p)) - 1.0));
}

float lobeSharpness(in float roughness) {
    return 2.0 / (roughness * roughness);
}

float lobeWeight(in vec3 cNormal, in vec3 sNormal, in float cRoughness, in float sRoughness, const float factor) {
    float cLambda = lobeSharpness(cRoughness), sLambda = lobeSharpness(sRoughness);
    float product = cLambda * sLambda, summa = cLambda + sLambda;
    return pow(summa * inversesqrt(product) * 0.5, -factor) * sphericalGaussian(cNormal, sNormal, product * (factor / maxEps(summa)));
}

vec4 ReflectionFilter(in ivec2 texel, in vec4 reflectionData, in float roughness, in vec3 worldNormal, in vec3 worldDir, in float filterSize, in vec2 randOffset) {
    float smoothness = 1.0 - approxSqrt(roughness);
    float linearDepth = FetchLinearDepth(texel);
    float NdotV = saturate(dot(worldNormal, -worldDir));

    float offsetScale = filterSize * exp2(-oneMinus(reflectionData.a) * smoothness);

	const vec2 angle = cossin(hPI);
	const mat2 rotND = mat2(angle, -angle.y, angle.x);

    // Calculate kernel basis
    vec3 reflectedDir = reflect(-worldDir, worldNormal);
    vec2 tangent = normalize(cross(worldNormal, reflectedDir).xy) * offsetScale;
    vec2 bitangent = tangent * rotND; // Cross product with tangent to get bitangent

    float skewFactor = mix(1.0, roughness, approxSqrt(1.0 - NdotV));
    tangent *= skewFactor;

    const float sharpenWeight = 0.5;

    reflectionData.rgb = pow(dotSelf(reflectionData.rgb), 0.5 * sharpenWeight) * normalize(maxEps(reflectionData.rgb));
    float sumWeight = 1.0;

    for (uint i = 0u; i < 8u; ++i) {
        vec2 offset = offset3x3N[i] + randOffset;
        ivec2 sampleTexel = clamp(texel + ivec2(tangent * offset.x + bitangent * offset.y), ivec2(0), ivec2(viewSize) - 1);

        vec4 sampleData = imageLoad(colorimg2, sampleTexel);

        float sampleLinerDepth = FetchLinearDepth(sampleTexel);
        vec3 sampleWorldNormal = FetchWorldNormal(sampleGbufferData0(sampleTexel));
        // vec3 sampleReflectedDir = reflect(-worldDir, sampleWorldNormal);
        float sampleRoughness = sqr(1.0 - unpackUnorm2x8(sampleGbufferData1(sampleTexel).x).x);

        float weight = lobeWeight(worldNormal, sampleWorldNormal, roughness, sampleRoughness, 2.0) * // Lobe weight
                       fastExp(-abs(reflectionData.a - sampleData.a) * smoothness) * // Hit distance weight
                       fastExp(-abs(sampleLinerDepth - linearDepth) * 4.0 * NdotV); // Depth weight

        reflectionData += vec4(pow(dotSelf(sampleData.rgb), 0.5 * sharpenWeight) * normalize(maxEps(sampleData.rgb)), sampleData.a) * weight;
        sumWeight += weight;
    }

    reflectionData /= sumWeight;
    reflectionData.rgb = pow(dotSelf(reflectionData.rgb), 0.5 / sharpenWeight) * normalize(maxEps(reflectionData.rgb));

    return reflectionData;
}

//======// Main //================================================================================//
void main() {
	ivec2 screenTexel = ivec2(gl_GlobalInvocationID.xy);

    vec4 reflectionData = imageLoad(colorimg2, screenTexel);

    #if defined SPECULAR_MAPPING && defined MC_SPECULAR_MAP
		vec4 specularTex = vec4(unpackUnorm2x8(sampleGbufferData1(screenTexel).x), vec2(0.0));
        Material material = GetMaterialData(specularTex);

        if (material.hasReflections && material.isRough) {
            vec2 screenCoord = normCoord(gl_GlobalInvocationID.xy);
            vec3 viewDir = ScreenToViewVector(screenCoord);

            vec3 worldDir = mat3(gbufferModelViewInverse) * viewDir;
            vec3 worldNormal = FetchWorldNormal(sampleGbufferData0(screenTexel));

            reflectionData = ReflectionFilter(screenTexel, reflectionData, material.roughness, worldNormal, worldDir, REFLECTION_FILTER_SIZE, RandNext2F() - 0.5);
        }
    #endif

    imageStore(colorimg2, screenTexel, reflectionData);
}
#--# Vanilla Settings #--------------------------------------------------------#

clouds					  = off
dynamicHandLight		  = true
oldHandLight			  = false
oldLighting				  = false
underwaterOverlay		  = false
sun						  = false
vignette				  = false
separateAo				  = true
frustum.culling			  = true
rain.depth				  = false
beacon.beam.depth		  = true
particles.before.world0/Atmosphere = true

#ifndef DH_SHADOW
	dhShadow.enabled 	  = false
#endif

#--# Custom Textures #---------------------------------------------------------#

texture.noise 					= texture/Noise2D.png
texture.deferred.colortex3.1 	= texture/atmosphere/Combined.lut TEXTURE_3D RGBA32F 256 128 33 RGBA FLOAT

#--# Blending #----------------------------------------------------------------#

blend.gbuffers_armor_glint	= SRC_COLOR ONE ZERO ONE
blend.gbuffers_basic		= off
blend.gbuffers_beaconbeam	= off
blend.gbuffers_block		= off
blend.gbuffers_damagedblock	= off
blend.gbuffers_entities		= off
blend.gbuffers_hand			= off
blend.gbuffers_hand_water	= off
blend.gbuffers_skybasic		= off
blend.gbuffers_skytextured	= off
blend.gbuffers_spidereyes	= off
blend.gbuffers_terrain		= off
blend.gbuffers_textured		= off
blend.gbuffers_water		= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_weather		= ONE ONE ONE ONE
blend.shadow                = off

#ifdef DISTANT_HORIZONS
	blend.dh_terrain 		= off
	blend.dh_water			= off
#endif

#--# Gbuffer Alpha #-----------------------------------------------------------#

blend.gbuffers_block.colortex0 		= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_entities.colortex0 	= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_hand.colortex0 		= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
# blend.gbuffers_textured.colortex0 	= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO

#--# Custom Uniforms #---------------------------------------------------------#

variable.float.worldLightVectorNorm = 1.0 / sqrt(shadowModelViewInverse.2.0 * shadowModelViewInverse.2.0 + shadowModelViewInverse.2.1 * shadowModelViewInverse.2.1 + shadowModelViewInverse.2.2 * shadowModelViewInverse.2.2)
variable.float.worldLightVectorX 	= shadowModelViewInverse.2.0 * worldLightVectorNorm
variable.float.worldLightVectorY 	= shadowModelViewInverse.2.1 * worldLightVectorNorm
variable.float.worldLightVectorZ 	= shadowModelViewInverse.2.2 * worldLightVectorNorm
uniform.vec3.worldLightVector 		= vec3(worldLightVectorX, worldLightVectorY, worldLightVectorZ)

variable.float.lightAngle 			= -signum(sunAngle * 2.0 - 1.0)
variable.float.worldSunVectorX 		= worldLightVectorX * lightAngle
variable.float.worldSunVectorY 		= worldLightVectorY * lightAngle
variable.float.worldSunVectorZ 		= worldLightVectorZ * lightAngle
uniform.vec3.worldSunVector 		= vec3(worldSunVectorX, worldSunVectorY, worldSunVectorZ)

uniform.vec2.viewSize 				= vec2(viewWidth, viewHeight)
uniform.vec2.viewPixelSize 			= vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.frameX 				= frac(frameCounter / 1.3247179572 + 0.5) * 2.0 - 1.0
variable.float.frameY 				= frac(frameCounter / 1.7548776662 + 0.5) * 2.0 - 1.0
uniform.vec2.taaOffset 				= vec2(frameX / viewWidth, frameY / viewHeight)

uniform.float.eyeSkylightFix 		= smooth(pow(clamp(eyeBrightness.y * (1.0 / 240.0), 0.0, 1.0), 4.0), 5, 5)

uniform.float.wetnessCustom 		= smooth(if(biome_precipitation == 1, wetness, 0.0), 5, 5)

uniform.float.weatherSnowySmooth 	= smooth(if(biome_precipitation == 2, 1.0, 0.0), 5, 5)

uniform.float.worldTimeCounter 		= ((worldDay % 128) * 24000.0 + worldTime) * 0.05

uniform.bool.worldTimeChanged 		= abs(smooth(worldTimeCounter, 0.1, 0.1) - worldTimeCounter) > 0.9

# https://www.desmos.com/calculator/kniltwna7u
uniform.float.meFade      			= if(worldSunVectorY < 0.18, 0.37 + 1.2 * max(0.0, -worldSunVectorY), 1.7)
uniform.float.meWeight    			= pow(clamp(1.0 - meFade * abs(worldSunVectorY - 0.18), 0.0, 1.0), 2.0)
uniform.float.timeNoon     			= if(worldSunVectorY > 0.0, 1.0, 0.0) * (1.0 - meWeight)
uniform.float.timeMidnight 			= if(worldSunVectorY < 0.0, 1.0, 0.0) * (1.0 - meWeight)
uniform.float.timeSunrise  			= if(worldSunVectorX > 0.0, 1.0, 0.0) * meWeight
uniform.float.timeSunset   			= if(worldSunVectorX < 0.0, 1.0, 0.0) * meWeight

#ifdef IS_IRIS
	uniform.float.lightningFlashing = smooth(if(lightningBoltPosition.w > 0.5, 1.0, 0.0), 0.01, 0.7)
#else
	uniform.float.lightningFlashing = smooth(if(equals(skyColor.r, skyColor.g, 0.01) && skyColor.r > 0.3, 1.0, 0.0), 0.01, 0.7)
#endif

uniform.vec3.lightningShading 		= vec3(0.45 * lightningFlashing, 0.43 * lightningFlashing, lightningFlash)

#--# Program Toggles #---------------------------------------------------------#

program.world0/BloomDownsample.enabled = BLOOM_ENABLED
program.world0/BlurH.enabled = BLOOM_ENABLED
program.world0/BlurV.enabled = BLOOM_ENABLED

#--# Buffer Flipping #---------------------------------------------------------#

#--# Buffer Sizes #------------------------------------------------------------#

# Sky-View LUT, light colors
size.buffer.colortex2 = 256 384

# Transmittance-View LUT, cloud shadow map
size.buffer.colortex10 = 256 384

#--# Profiles #----------------------------------------------------------------#

profile.Default =*

#--# Settings #----------------------------------------------------------------#

screen =*

#--# Sliders #-----------------------------------------------------------------#

sliders =*
